#!/bin/bash

set -euo pipefail

OWN_FILENAME="$(basename $0)"
LAMBDA_EXTENSION_NAME="$OWN_FILENAME"
TMPFILE=$(mktemp "${TMPDIR:-/tmp/}$(basename $0).XXX")
OPA_OUTPUT=$(mktemp "${TMPDIR:-/tmp/}$(basename $0).XXX")

HOST=$(echo "${AWS_LAMBDA_RUNTIME_API}" | cut -d ':' -f 1)
PORT=$(echo "${AWS_LAMBDA_RUNTIME_API}" | cut -d ':' -f 2)

# Graceful Shutdown
_term() {
  echo "[${LAMBDA_EXTENSION_NAME}] Received SIGTERM"
  # forward SIGTERM to child procs and exit
  kill -TERM "$OPA_PID" 2>/dev/null
  # kill -TERM "$PID" 2>/dev/null
  echo "[${LAMBDA_EXTENSION_NAME}] Exiting"
  exit 0
}

forward_sigterm_and_wait() {
  trap _term SIGTERM
  wait "$OPA_PID"
  # wait "$PID"
  trap - SIGTERM
}

register_extension() {
  # The extension registration also signals to Lambda to start initializing the runtime. 
  echo "[${LAMBDA_EXTENSION_NAME}] Registering at http://${AWS_LAMBDA_RUNTIME_API}/2020-01-01/extension/register"
  REQUEST_BODY='{"events": ["INVOKE", "SHUTDOWN"]}'
  exec {fd}<> /dev/tcp/${HOST}/${PORT}
  echo -e "POST /2020-01-01/extension/register HTTP/1.1" >&${fd}
  echo -e "Host: ${AWS_LAMBDA_RUNTIME_API}" >&${fd}
  echo -e "Lambda-Extension-Name: ${LAMBDA_EXTENSION_NAME}" >&${fd}
  echo -e "Content-Type: application/json" >&${fd}
  echo -e "Content-Length: ${#REQUEST_BODY}" >&${fd}
  echo -e "Connection: close" >&${fd}
  echo -e "" >&${fd}
  echo -e "${REQUEST_BODY}" >&${fd}
  (dd of=$TMPFILE) <&${fd}>&2 2> /dev/null
  exec {fd}<&-
  RESPONSE=$(<$TMPFILE)
  REGISTER_HEADERS=$(echo "${RESPONSE}" | awk 'BEGIN{RS="\r\n\r\n"} NR==1')
  REGISTER_DATA=$(echo "${RESPONSE}" | awk 'BEGIN{RS="\r\n\r\n"} NR==2')
  EXTENSION_ID=$(echo "$REGISTER_HEADERS" | grep -i "^Lambda-Extension-Identifier:" | awk '{print $2}')
  echo "[${LAMBDA_EXTENSION_NAME}] Registration response: ${REGISTER_DATA} with Extension Identifier: ${EXTENSION_ID}"
}

wait_for_next_event() {
  echo "[${LAMBDA_EXTENSION_NAME}] Waiting for event. Get /next event from http://${AWS_LAMBDA_RUNTIME_API}/2020-01-01/extension/event/next"
  exec {fd}<> /dev/tcp/${HOST}/${PORT}
  echo -e "GET /2020-01-01/extension/event/next HTTP/1.1" >&${fd}
  echo -e "Host: ${AWS_LAMBDA_RUNTIME_API}" >&${fd}
  echo -e "Lambda-Extension-Identifier: ${EXTENSION_ID}" >&${fd}
  echo -e "Connection: close" >&${fd}
  echo -e "" >&${fd}
  echo -e "" >&${fd}
  (dd of=$TMPFILE) <&${fd}>&2 2> /dev/null
  exec {fd}<&-
  RESPONSE=$(<$TMPFILE)
  EVENT_HEADERS=$(echo "${RESPONSE}" | awk 'BEGIN{RS="\r\n\r\n"} NR==1')
  EVENT_DATA=$(echo "${RESPONSE}" | awk 'BEGIN{RS="\r\n\r\n"} NR==2')
  EVENT_ID=$(echo "$EVENT_HEADERS" | grep -i "^Lambda-Extension-Event-Identifier:" | awk '{print $2}')
  echo -e "[${LAMBDA_EXTENSION_NAME}] Next event response: ${EVENT_DATA} with Event Identifier: ${EVENT_ID}"
}

# Initialization
# To run any extension processes that need to start before the runtime initializes, run them before the /register 
echo "[${LAMBDA_EXTENSION_NAME}] Initialization"

# Start the extension process
echo "[${LAMBDA_EXTENSION_NAME}] Running OPA server as a background process"
echo $(date +"%F %T.%3N")

# if OPA_LOGS_TO_CLOUDWATCH is set to true, then OPA will log to stdout
if [ "${OPA_LOGS_TO_CLOUDWATCH:-false}" = "true" ]; then
  # use this if you want to see the OPA logs in CloudWatch
  /opt/${LAMBDA_EXTENSION_NAME}/opa run \
    --log-level=debug \
    --disable-telemetry \
    --server "${OPA_POLICY_PATH:-/opt/extensions/opa/policies}" \
    2>&1 | tee "$OPA_OUTPUT" &
else
  echo "[${LAMBDA_EXTENSION_NAME}] To see OPA logs in CloudWatch, set OPA_LOGS_TO_CLOUDWATCH environment variable to true"
  # else continue to log to file
  /opt/${LAMBDA_EXTENSION_NAME}/opa run \
    --log-level=debug \
    --disable-telemetry \
    --server "${OPA_POLICY_PATH:-/opt/extensions/opa/policies}" \
    > "$OPA_OUTPUT" 2>&1 &
fi

OPA_PID=$!

echo "[${LAMBDA_EXTENSION_NAME}] Waiting for server to initialize"

while true; do
  if grep -q "Server initialized" "$OPA_OUTPUT"; then
    echo "[${LAMBDA_EXTENSION_NAME}] Server initialized!" 
    break
  fi
done
echo $(date +"%F %T.%3N")

# Registration
register_extension

# Event processing
# Continuous loop to wait for events from Extensions API
while true
do
  wait_for_next_event

  # PID=$!
  # forward_sigterm_and_wait

  if [[ $EVENT_DATA == *"SHUTDOWN"* ]]; then
    echo "[extension: ${LAMBDA_EXTENSION_NAME}] Received SHUTDOWN event. Exiting." 1>&2;
    exit 0 # Exit if we receive a SHUTDOWN event
  fi
done