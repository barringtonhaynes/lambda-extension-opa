name: Build and deploy AWS Lambda OPA extension layer
on:
  release:
    types: [published]
  repository_dispatch:
    types: [opa-release-created]
    payload:
      owner: open-policy-agent
      repo: opa
  workflow_dispatch:
    inputs:
      tag_name:
        description: "OPA release tag name"
        required: true
        type: string
env:
  TAG_NAME: ${{ github.event.inputs.tag_name || github.event.release.tag_name }}
jobs:
  build-layer-amd64:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.inputs.tag_name || github.event.release.tag_name, 'v') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip awscli jq
      - name: Download OPA assets (AMD64)
        run: |
          curl -L https://github.com/open-policy-agent/opa/releases/download/${{ env.TAG_NAME }}/opa_linux_amd64_static -o src/opa/opa
      - name: Build Lambda layer (AMD64)
        run: |
          cd src
          zip -r ../opa-layer-amd64.zip *
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Upload layer to S3
        run: |
          aws s3 cp opa-layer-amd64.zip s3://${{ secrets.S3_BUCKET }}/opa-layer/${{ env.TAG_NAME }}/opa-layer-amd64.zip
      - name: Create Lambda layer version (AMD64)
        run: |
          echo '{}' > layer-arns-amd64.json
          aws_regions=$(aws ec2 describe-regions --query "Regions[].RegionName" --output text | tr '\t' ',')
          IFS=',' read -ra aws_regions <<< "$aws_regions"
          for region in "${aws_regions[@]}"; do
            trap 'echo "Error publishing layer version in region $region. Continuing..."' ERR
            runtimes=$(aws lambda list-runtimes --region $region --query "Runtimes[*]" --output json | tr -d '[],"')
            layer_arn=$(aws lambda publish-layer-version \
              --region $region \
              --layer-name opa-layer \
              --description "OPA Layer $TAG_NAME (AMD64)" \
              --license-info "Apache-2.0" \
              --zip-file fileb://opa-layer-amd64.zip \
              --compatible-architectures x86_64 \
              --compatible-runtimes $runtimes \
              --query LayerVersionArn \
              --output text)
            version_number=$(echo "$layer_arn" | awk -F: '{print $NF}')
            aws lambda add-layer-version-permission \
              --layer-name opa-layer \
              --statement-id "opa-layer-amd64-$region-$version_number" \
              --action lambda:GetLayerVersion  \
              --principal '*' \
              --version-number $version_number
            jq --arg region "$region" --arg arn "$layer_arn" '. + { ($region): $arn }' layer-arns-amd64.json > layer-arns-amd64.json.tmp && mv layer-arns-amd64.json.tmp layer-arns-amd64.json
            trap - ERR
          done
      - name: Upload layer ARNs JSON as artifact
        uses: actions/upload-artifact@v3
        with:
          name: layer-arns-amd64
          path: layer-arns-amd64.json
  build-layer-arm64:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.inputs.tag_name || github.event.release.tag_name, 'v') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip awscli jq
      - name: Download OPA assets (ARM64)
        run: |
          curl -L https://github.com/open-policy-agent/opa/releases/download/${{ env.TAG_NAME }}/opa_linux_arm64_static -o src/opa/opa
      - name: Build Lambda layer (ARM64)
        run: |
          cd src
          zip -r ../opa-layer-arm64.zip *
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Upload layer to S3
        run: |
          aws s3 cp opa-layer-arm64.zip s3://${{ secrets.S3_BUCKET }}/opa-layer/${{ env.TAG_NAME }}/opa-layer-arm64.zip
      - name: Create Lambda layer version (ARM64)
        run: |
          echo '{}' > layer-arns-arm64.json
          aws_regions=$(aws ec2 describe-regions --query "Regions[].RegionName" --output text | tr '\t' ',')
          IFS=',' read -ra aws_regions <<< "$aws_regions"
          for region in "${aws_regions[@]}"; do
            trap 'echo "Error publishing layer version in region $region. Continuing..."' ERR
            runtimes=$(aws lambda list-runtimes --region $region --query "Runtimes[*]" --output json | tr -d '[],"')
            layer_arn=$(aws lambda publish-layer-version \
              --region $region \
              --layer-name opa-layer \
              --description "OPA Layer $TAG_NAME (ARM64)" \
              --license-info "Apache-2.0" \
              --zip-file fileb://opa-layer-arm64.zip \
              --compatible-architectures arm64 \
              --compatible-runtimes $runtimes \
              --query LayerVersionArn \
              --output text)
            version_number=$(echo "$layer_arn" | awk -F: '{print $NF}')
            aws lambda add-layer-version-permission \
              --layer-name opa-layer \
              --statement-id "opa-layer-arm64-$region-$version_number" \
              --action lambda:GetLayerVersion  \
              --principal '*' \
              --version-number $version_number
            jq --arg region "$region" --arg arn "$layer_arn" '. + { ($region): $arn }' layer-arns-arm64.json > layer-arns-arm64.json.tmp && mv layer-arns-arm64.json.tmp layer-arns-arm64.json
            trap - ERR
          done
      - name: Upload layer ARNs JSON as artifact
        uses: actions/upload-artifact@v3
        with:
          name: layer-arns-arm64
          path: layer-arns-arm64.json
  update-readme:
    needs: [build-layer-amd64, build-layer-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Download layer ARNs JSON files
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Update README.md with new layer ARNs
        run: |
          #!/bin/bash
          set -e
          echo "Generating layers table"
          
          echo "<!-- LAYERS_TABLE_START -->" > layers_table.md
          echo "| Region | x86_64 | arm64 |" >> layers_table.md
          echo "| ------ | ------ | ----- |" >> layers_table.md

          jq -r 'to_entries[] | .key' artifacts/layer-arns-amd64.json | while read -r region; do
            x86_arn=$(jq -r --arg region "$region" '.[$region]' artifacts/layer-arns-amd64.json)
            arm64_arn=$(jq -r --arg region "$region" '.[$region]' artifacts/layer-arns-arm64.json)
            ...
          done

          echo "<!-- LAYERS_TABLE_END -->" >> layers_table.md

          echo "Replacing layers table in README.md"
          sed -i -e '/<!-- LAYERS_TABLE_START -->/,/<!-- LAYERS_TABLE_END -->/{//!d;}' README.md
          sed -i -e '/<!-- LAYERS_TABLE_START -->/r layers_table.md' README.md

          echo "Layers table updated in README.md"
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m ":memo: Update layers table in README.md" || echo "No changes to commit"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.head_ref }}
